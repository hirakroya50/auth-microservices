

can do now : 
 Refresh Token Mechanism
- refresh token system to extend user sessions without requiring them to log in frequently.
- Store refresh tokens securely in a database or in-memory store like Redis and use JWT for access tokens.
-Include an option for users to invalidate or revoke refresh tokens (e.g., logout from all devices).


-> role-based access control like Admin, User, Moderator, etc.,

*************************************DONE
5. Rate Limiting and Brute Force Protection
- Add rate limiting (e.g., limit OTP requests  ).
- Use  @nestjs/throttler for rate-limiting.

-Implement automatic account lockout after a certain number of failed attempts with a temporary block.
- RATE LIMITE FOR FREE USER / AND UNLIMITED FOR PAID / OR ACCESS PERDITION AS PER THE PACKEGE : IN MONTH , WEEK , YEAR 


6. Session Management
- multiple user sessions from different devices, terminate active sessions. users to log out from all devices.

8. Event-Driven Architecture
- Use an event-driven architecture for better decoupling and scalability.
- For example, use message queues (RabbitMQ, Kafka, etc.) for actions like sending OTPs, verification emails, or triggering post-login events.


12. IP and Location Tracking for Security
- Log the IP address and location (approximate) of every login attempt and notify users of unusual login attempts.
- Provide users with an option to enable or disable notifications for logins from new devices or locations.



//TOPIC COVER

1. used prisma orm 
2. use redis in :  otp save in chach 
3. nodemailer to send the email 
4. Twilio for end tge sms to phone no 
5. rate limit to the otp genaration  -> 
      2 types of rate limiting 
      1. by own logic in the smsService 
      2. by @nestjs/throttler


SIGN_UP

-----------------------------
SIGN_UP Process is easy just //sign-up(with email, username, mobile and password )
just call to this api that will create the account 
-> but to access the all thing have to verify the email or phone 


verification after sighup (user can skip this part for later to visit the app)
--------------------------------

-> before that we have to generate the otp (rate-limiting - 3 generate otp per 1 hour )
   by this "'/generate-otp'"(email, username, country code, mobile), 
-> then by :"/verify-otp"(email, otp) we can verify the otp 


or, 

-> very by the email link 
-> we can send the verification link in the email, 
-> by clicking the link we can verify the email 



SIGN_IN  

by this   @Post('/sign-in') we can sign in (email/ username/ phone, password )








